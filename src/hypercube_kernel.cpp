#include <iostream>
#include <string.h>
#include <hls_stream.h>
#include <hls_math.h>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <iomanip>
// #include "my_lgamma.h"
typedef ap_fixed<64, 32> score_t;
//typedef ap_fixed<32,10> score_t;
//typedef double score_t;
typedef unsigned int varset_t;
#define DATA_BIT 8
typedef ap_uint<DATA_BIT> data_t;
//#define MAXOF_VARS 8
#define NUMOF_VARS 8
#define PE_NUM 70
#define NUMOF_DATASETS 1000
//#define MINUS_INF (-1*1e-15);
#define DEBUGOUT false

using namespace std;

namespace mylib{
  /*score_t lgamma_int(int k){;
    //log((k-1)!)
    score_t res = 0;
    for(int i = 2; i <= (k - 1); i++){
  #pragma HLS PIPELINE//UNROLL?
      res += hls::log((score_t)i);
    }
    return res;
  }*/

  score_t lgamma_int(int k){
    score_t lgamma_table[1024] = {0, 0.00000000000000000000, 0.00000000000000000000, 0.69314718055994528623, 1.79175946922805495731, 3.17805383034794575181, 4.78749174278204581157, 6.57925121201010121297, 8.52516136106541289053, 10.60460290274525085863,
    12.80182748008147086693, 15.10441257307551765621, 17.50230784587388654927, 19.98721449566188823610, 22.55216385312342097791, 25.19122118273867982907, 27.89927138384089033707, 30.67186010608067547878, 33.50507345013689075586, 36.39544520803305260870,
    39.33988418719949464730, 42.33561646075348505747, 45.38013889847691473278, 48.47118135183522724674, 51.60667556776437692179, 54.78472939811231157137, 58.00360522298052501355, 61.26170176100200137626, 64.55753862700632339511, 67.88974313718154007802,
    71.25703896716801466482, 74.65823634883017234642, 78.09222355331530707190, 81.55795945611502872907, 85.05446701758152983075, 88.58082754219766741244, 92.13617560368709291652, 95.71969454214320194296, 99.33061245478742762316, 102.96819861451379551909,
    106.63176026064346046951, 110.32063971475740515871, 114.03421178146170689160, 117.77188139974506952967, 121.53308151543862436483, 125.31727114935688405239, 129.12393363912721611086, 132.95257503561629164324, 136.80272263732638293732, 140.67392364823425054965,
    144.56574394634486679934, 148.47776695177302030970, 152.40959258449737490082, 156.36083630307879843713, 160.33112821663090130642, 164.32011226319519892058, 168.32744544842768164017, 172.35279713916281707498, 176.39584840699731671521, 180.45629141754378110818,
    184.53382886144945018714, 188.62817342367159767491, 192.73904728784492590421, 196.86618167289000780329, 201.00931639928148797480, 205.16819948264117101644, 209.34258675253681758477, 213.53224149456326586005, 217.73693411395424845978, 221.95644181913033321507,
    226.19054832372762575687, 230.43904356577695580199, 234.70172344281826326551, 238.97838956183431946556, 243.26884900298276193098, 247.57291409618684951965, 251.89040220972319161774, 256.22113555000953510898, 260.56494097186322278503, 264.92164979855277806564,
    269.29109765101975426660, 273.67312428569374560539, 278.06757344036617496386, 282.47429268763045229207, 286.89313329542699193553, 291.32395009427028753635, 295.76660135076059532366, 300.22094864701415417585, 304.68685676566872189142, 309.16419358014690033087,
    313.65282994987904885420, 318.15263962020929966457, 322.66349912672620803278, 327.18528770377525916047, 331.71788719692847280385, 336.26118197919845442811, 340.81505887079902095138, 345.37940706226686415903, 349.95411804077025408333, 354.53908551944078908491,
    359.13420536957545436962, 363.73937555556352663189, 368.35449607240474279024, 372.97946888568901613326, 377.61419787391861291326, 382.25858877305995520146, 386.91254912321750225601, 391.57598821732955229891, 396.24881705179154778307, 400.93094827891570730571,
    405.62229616114495911461, 410.32277652693727532096, 415.03230672824963676248, 419.75080559954477621432, 424.47819341825709216209, 429.21439186665156739764, 433.95932399501481313564, 438.71291418612122470222, 443.47508812091899699226, 448.24577274538467008824,
    453.02489623849606914519, 457.81238798127822064998, 462.60817852687495133068, 467.41219957160814146846, 472.22438392698063580610, 477.04466549258563645708, 481.87297922988796017307, 486.70926113683935909648, 491.55344822329800535954, 496.40547848721763557478,
    501.26529089157924090614, 506.13282534203483464808, 511.00802266523595562830, 515.89082458782240792061, 520.78117371604412255692, 525.67901351599516601709, 530.58428829443357699347, 535.49694318016952365724, 540.41692410599762297352, 545.34417779115483426722,
    550.27865172428550977202, 555.22029414689484383416, 560.16905403727309931128, 565.12488109487424026156, 570.08772572513419163442, 575.05753902471019500808, 580.03427276713080118498, 585.01787938883899187203, 590.00831197561785756989, 595.00552424938200601900,
    600.00947055532742524520, 605.02010584942377136031, 610.03738568623862192908, 615.06126620708494101564, 620.09170412847731768125, 625.12865673089095253090, 630.17208184781020463561, 635.22193785505965024640, 640.27818366040810360573, 645.34077869343502698030,
    650.40968289565523718920, 655.48485671088906201476, 660.56626107587351270922, 665.65385741110594608472, 670.74760761191271285497, 675.84747403973688051337, 680.95341951363752741599, 686.06540730199412791990, 691.18340111441079898214, 696.30736509381404175656,
    701.43726380873704329133, 706.57306224578735509567, 711.71472580228999049723, 716.86222027910355336644, 722.01551187360132644244, 727.17456717281584133161, 732.33935314673919947381, 737.50983714177732508688, 742.68598687435121519229, 747.86777042464336773264,
    753.05515623048404449946, 758.24811308137441301369, 763.44661011264008720900, 768.65061679971711328108, 773.86010295255834989803, 779.07503871016729135590, 784.29539453524569125875, 789.52114120895885207574, 794.75224982581346466759, 799.98869178864345030888,
    805.23043880370300939830, 810.47746287586357993860, 815.72973630391015831265, 820.98723167593789185048, 826.24992186484291778470, 831.51778002390619803919, 836.79077958246978141688, 842.06889424170037727890, 847.35209797043842172570, 852.64036500113297734060,
    857.93366982585735058819, 863.23198719240542686748, 868.53529210046463049366, 873.84355979786573698220, 879.15676577690749127214, 884.47488577075182547560, 889.79789574989013090089, 895.12577191867967485450, 900.45849071194516000105, 905.79602879164644946286,
    911.13836304361120710382, 916.48547057432881501882, 921.83732870780465873395, 927.19391498247682648071, 932.55520714818612759700, 937.92118316320795656793, 943.29182119133577089087, 948.66709959901993443054, 954.04699695256033464830, 959.43149201534936310054,
    964.82056374516605501412, 970.21419129151820470724, 975.61235399303609483468, 981.01503137490840344981, 986.42220314636836064892, 991.83384919822344727436, 997.24994960042795355548, 1002.67048459970033036370, 1008.09543461718169510277, 1013.52478024613606066850,
    1018.95850224969035480171, 1024.39658155861343402648, 1029.83899926913522904215, 1035.28573664080136040866, 1040.73677509436720356462, 1046.19209620972492302826, 1051.65168172386938749696, 1057.11551352889478039287, 1062.58357367002986393345, 1068.05584434370143753767,
    1073.53230789563281177834, 1079.01294681897479676991, 1084.49774375246556701313, 1089.98668147862213118060, 1095.47974292196272472211, 1100.97691114725625993742, 1106.47816935780042513215, 1111.98350089373298033024, 1117.49288923036101550679, 1123.00631797652613386163,
    1128.52377087299078084470, 1134.04523179085299489088, 1139.57068472998457764334, 1145.10011381749609427061, 1150.63350330622370165656, 1156.17083757324212456297, 1161.71210111840059653332, 1167.25727856288017392217, 1172.80635464777537890768, 1178.35931423269698825607,
    1183.91614229439664995880, 1189.47682392541219087434, 1195.04134433273475224269, 1200.60968883649593408336, 1206.18184286867358423478, 1211.75779197181987001386, 1217.33752179780617552751, 1222.92101810658800786769, 1228.50826676498809320037, 1234.09925374549879961705,
    1239.69396512510093089077, 1245.29238708409911851049, 1250.89450590497904158838, 1256.50030797127487858234, 1262.10977976645995113358, 1267.72290787284805446689, 1273.33967897051456930058, 1278.96007983623167092446, 1284.58409734241899968765, 1290.21171845610956552264,
    1295.84293023793088650564, 1301.47771984110022458481, 1307.11607451043414585001, 1312.75798158137217797048, 1318.40342847901547429501, 1324.05240271717661926232, 1329.70489189744512259495, 1335.36088370826519167167, 1341.02036592402487258369, 1346.68332640416065260069,
    1352.34975309227320394712, 1358.01963401525358676736, 1363.69295728242514087469, 1369.36971108469356295245, 1375.04988369371039880207, 1380.73346346104926851694, 1386.42043881738891286659, 1392.11079827171306533273, 1397.80453041051555373997, 1403.50162389702109067002,
    1409.20206747041174821788, 1414.90584994506775728951, 1420.61296020981671972550, 1426.32338722719168799813, 1432.03712003270106833952, 1437.75414773410739144310, 1443.47445951071472336480, 1449.19804461266699036059, 1454.92489236025426180277, 1460.65499214322812804312,
    1466.38833342012571847590, 1472.12490571760463353712, 1477.86469862978424316680, 1483.60770181759335173410, 1489.35390500813355174614, 1495.10329799404189543566, 1500.85587063286766351666, 1506.61161284645436353458, 1512.37051462033196003176, 1518.13256600311183319718,
    1523.89775710589674417861, 1529.66607810169057302119, 1535.43751922482078953180, 1541.21207077036501686962, 1546.98972309358759957831, 1552.77046660938003697083, 1558.55429179170960196643, 1564.34118917307637275371, 1570.13114934397367505881, 1575.92416295235784673423,
    1581.72022070312323194230, 1587.51931335758376917511, 1593.32143173296071836376, 1599.12656670187720919785, 1604.93470919185801903950, 1610.74585018483435305825, 1616.55998071665953830234, 1622.37709187662267140695, 1628.19717480697499922826, 1634.02022070245811846689,
    1639.84622080983854175429, 1645.67516642744885757565, 1651.50704890473207342438, 1657.34185964179482652980, 1663.17959008896082195861, 1669.02023174633427515801, 1674.86377616336562823562, 1680.71021493842340532865, 1686.55953971837016069912, 1692.41174219814456591848,
    1698.26681412034690765722, 1704.12474727483026981645, 1709.98553349829626313294, 1715.84916467389439276303, 1721.71563273082779232936, 1727.58492964396145907813, 1733.45704743343708287284, 1739.33197816428901205654, 1745.20971394606863213994, 1751.09024693246919923695,
    1756.97356932095772208413, 1762.85967335240752618120, 1768.74855131074082237319, 1774.64019552256627321185, 1780.53459835683133860584, 1786.43175222446802763443, 1792.33164957805047379225, 1798.23428291145205548673, 1804.13964475950660926173, 1810.04772769767532736296,
    1815.95852434171592904022, 1821.87202734735410558642, 1827.78822940996133183944, 1833.70712326423472404713, 1839.62870168387871672167, 1845.55295748129287858319, 1851.47988350726359385590, 1857.40947265065346982738, 1863.34171783810143097071, 1869.27661203372099407716,
    1875.21414823880331823602, 1881.15431949152389279334, 1887.09711886665058955259, 1893.04253947525694456999, 1898.99057446443771368649, 1904.94121701702556492819, 1910.89446035131322787493, 1916.85029772077814413933, 1922.80872241380802734056, 1928.76972775343097055156,
    1934.73330709704964647244, 1940.69945383617346124083, 1946.66816139615843894717, 1952.63942323594915251306, 1958.61323284781838083290, 1964.58958375711631560989, 1970.56846952201749445521, 1976.54988373327205408714, 1982.53382001395902989316, 1988.52027201924374821829,
    1994.50923343613339966396, 2000.50069798324147996027, 2006.49465941054813811206, 2012.49111149916666363424, 2018.49004806111383913958, 2024.49146293907460858463, 2030.49535000618152480456, 2036.50170316578282836417, 2042.51051635122576044523, 2048.52178352563032603939,
    2054.53549868167283420917, 2060.55165584137057521730, 2066.57024905586740715080, 2072.59127240521684143459, 2078.61471999817786127096, 2084.64058597200300937402, 2090.66886449223375166184, 2096.69954975249493145384, 2102.73263597429377114167, 2108.76811740681841911282,
    2114.80598832674058940029, 2120.84624303801774658496, 2126.88887587170074766618, 2132.93388118573648171150, 2138.98125336478278768482, 2145.03098682001518682227, 2151.08307598893907197635, 2157.13751533520871817018, 2163.19429934843719820492, 2169.25342254401903119287,
    2175.31487946294691937510, 2181.37866467163439665455, 2187.44477276173847712926, 2193.51319834998230362544, 2199.58393607798507218831, 2205.65698061208559010993, 2211.73232664317401940934, 2217.80996888652316556545, 2223.88990208161885675509, 2229.97212099199487056467,
    2236.05662040507013443857, 2242.14339513198274289607, 2248.23244000742943171645, 2254.32374988950732586090, 2260.41731965955204941565, 2266.51314422198447573464, 2272.61121850415111111943, 2278.71153745617084496189, 2284.81409605078397362377, 2290.91888928319986007409,
    2297.02591217094186504255, 2303.13515975370637534070, 2309.24662709320864451001, 2315.36030927304136639577, 2321.47620139852415377391, 2327.59429859656529515632, 2333.71459601551669038599, 2339.83708882503060522140, 2345.96177221592506612069, 2352.08864140003925058409,
    2358.21769161009933668538, 2364.34891809958253361401, 2370.48231614257929322775, 2376.61788103366097857361, 2382.75560808774707766133, 2388.89549263997332673171, 2395.03753004556074301945, 2401.18171567968693125295, 2407.32804493735557116452, 2413.47651323327318095835,
    2419.62711600171905956813, 2425.77984869642341436702, 2431.93470679043957716203, 2438.09168577602531513548, 2444.25078116451777532347, 2450.41198848621252182056, 2456.57530329024712045793, 2462.74072114447881176602, 2468.90823763536718615796, 2475.07784836785822335514,
    2481.24954896526924130740, 2487.42333506917111662915, 2493.59920233927687149844, 2499.77714645332753207185, 2505.95716310698071538354, 2512.13924801369694250752, 2518.32339690463413717225, 2524.50960552853484841762, 2530.69786965161756597809, 2536.88818505747076414991,
    2543.08054754694512666902, 2549.27495293804986431496, 2555.47139706584448504145, 2561.66987578233693056973, 2567.87038495637943924521, 2574.07292047356759212562, 2580.27747823613617583760, 2586.48405416286095714895, 2592.69264418895772905671, 2598.90324426598226636997,
    2605.11585036173391927150, 2611.33045846015602364787, 2617.54706456124085889314, 2623.76566468093278672313, 2629.98625485103229948436, 2636.20883111910370644182, 2642.43338954837918208796, 2648.65992621766690717777, 2654.88843722125784552190, 2661.11891866883615875850,
    2667.35136668538643789361, 2673.58577741110502756783, 2679.82214700130907658604, 2686.06047162634831693140, 2692.30074747151911651599, 2698.54297073697443920537, 2704.78713763763789756922, 2711.03324440311962462147, 2717.28128727762805283419, 2723.53126251988760486711,
    2729.78316640305320106563, 2736.03699521462885968504, 2742.29274525638220438850, 2748.55041284426533820806, 2754.80999430832935104263, 2761.07148599265065058717, 2767.33488425524274134659, 2773.60018546798028182820, 2779.86738601652177749202, 2786.13648230022772622760,
    2792.40747073208603978856, 2798.68034773863246300607, 2804.95510975987417623401, 2811.23175324921567153069, 2817.51027467338190035662, 2823.79067051234187601949, 2830.07293725923773308750, 2836.35707142030923932907, 2842.64306951481785290525, 2848.93092807497987450915,
    2855.22064364588868556893, 2861.51221278544653614517, 2867.80563206429314959678, 2874.10089806573296300485, 2880.39800738566646032268, 2886.69695663252241502050, 2892.99774242718558525667, 2899.30036140293077551178, 2905.60481020535280549666, 2911.91108549230102653382,
    2918.21918393381019996013, 2924.52910221203683249769, 2930.84083702118959990912, 2937.15438506746704661055, 2943.46974306898891882156, 2949.78690775573659266229, 2956.10587586948304306134, 2962.42664416373372660019, 2968.74920940366064314730, 2975.07356836604185446049,
    2981.39971783919736481039, 2987.72765462292636584607, 2994.05737552844857418677, 3000.38887737834329527686, 3006.72215700648257552530, 3013.05721125798072534963, 3019.39403698912701656809, 3025.73263106732974847546, 3032.07299037105804018211, 3038.41511178977907547960,
    3044.75899222390580689535, 3051.10462858473420055816, 3057.45201779439003075822, 3063.80115678577021753881, 3070.15204250248461903539, 3076.50467189880419027759, 3082.85904193960186603363, 3089.21514960029753638082, 3095.57299186680575076025, 3101.93256573547841981053,
    3108.29386821305070043309, 3114.65689631659097358352, 3121.02164707344354610541, 3127.38811752117453579558, 3133.75630470752503242693, 3140.12620569035334483488, 3146.49781753758497870876, 3152.87113732716215963592, 3159.24616214699062766158, 3165.62288909488916033297,
    3172.00131527854000523803, 3178.38143781544022203889, 3184.76325383284620329505, 3191.14676046773047346505, 3197.53195486672848346643, 3203.91883418609086220386, 3210.30739559163657759200, 3216.69763625870200485224, 3223.08955337209408753552, 3229.48314412604486278724,
    3235.87840572416052964400, 3242.27533537937642904581, 3248.67393031391156910104, 3255.07418775922087661456, 3261.47610495594744861592, 3267.87967915388298933976, 3274.28490761191324054380, 3280.69178759798296596273, 3287.10031638904229112086, 3293.51049127100850455463,
    3299.92230953871830934077, 3306.33576849588598634000, 3312.75086545505700996728, 3319.16759773756984941429, 3325.58596267350594644086, 3332.00595760165242609219, 3338.42757986945935044787, 3344.85082683299333439209, 3351.27569585689798259409, 3357.70218431435614547809,
    3364.13028958704080650932, 3370.56000906508006664808, 3376.99134014701303385664, 3383.42428023975207906915, 3389.85882675854008994065, 3396.29497712690908883815, 3402.73272877664567204192, 3409.17207914774598975782, 3415.61302568837845683447, 3422.05556585484691822785,
    3428.49969711154744800297, 3434.94541693093242429313, 3441.39272279347460425925, 3447.84161218762073985999, 3454.29208260976520250551, 3460.74413156420223458554, 3467.19775656309502664953, 3473.65295512643524489249, 3480.10972478200710611418, 3486.56806306535190742579,
    3493.02796751972982747247, 3499.48943569608309189789, 3505.95246515300459577702, 3512.41705345669379312312, 3518.88319818093214053079, 3525.35089690703625819879, 3531.82014722383200933109, 3538.29094672761448236997, 3544.76329302211524918675, 3551.23718371846825903049,
    3557.71261643517163975048, 3564.18958879806132244994, 3570.66809844027011422440, 3577.14814300219677534187, 3583.62972013147327743354, 3590.11282748292978794780, 3596.59746271856556631974, 3603.08362350750894620433, 3609.57130752599414336146, 3616.06051245731941889971,
    3622.55123599182206817204, 3629.04347582684204098769, 3635.53722966669420202379, 3642.03249522263104154263, 3648.52927021281675479258, 3655.02755236229359070421, 3661.52733940294956482830, 3668.02862907348935550544, 3674.53141911940520003554, 3681.03570729294233387918,
    3687.54149135307034157449, 3694.04876906545541714877, 3700.55753820242671281449, 3707.06779654294996362296, 3713.57954187259474565508, 3720.09277198350764592760, 3726.60748467437997533125, 3733.12367775042275752639, 3739.64134902333489662851, 3746.16049631127543761977,
    3752.68111743883400777122, 3759.20321023700353180175, 3765.72677254315385653172, 3772.25180220099719008431, 3778.77829706056763825472, 3785.30625497819073643768, 3791.83567381645252680755, 3798.36655144417863994022, 3804.89888573640064350911, 3811.43267457433421441237,
    3817.96791584534776120563, 3824.50460744293923198711, 3831.04274726670655581984, 3837.58233322232445061672, 3844.12336322151440981543, 3850.66583518202105551609, 3857.20974702758621788234, 3863.75509668792028605822, 3870.30188209868083504261, 3876.85010120144306711154,
    3883.39975194367707445053, 3889.95083227872055431362, 3896.50334016575516216108, 3903.05727356978104580776, 3909.61263046159183431882, 3916.16940881774962690542, 3922.72760662056180080981, 3929.28722185805554545368, 3935.84825252395194183919, 3942.41069661764549891814,
    3948.97455214417777824565, 3955.53981711421283762320, 3962.10648954401631272049, 3968.67456745542813223437, 3975.24404887584205425810, 3981.81493183818201941904, 3988.38721438087623027968, 3994.96089454783668770688, 4001.53597038843645350426, 4008.11243995748463930795,
    4014.69030131520594295580, 4021.26955252721563738305, 4027.85019166450047123362, 4034.43221680339365775581, 4041.01562602555168268736, 4047.60041741793793335091, 4054.18658907279268532875, 4060.77413908761718630558, 4067.36306556515091870097, 4073.95336661334795280709,
    4080.54504034535648315796, 4087.13808487949836489861, 4093.73249833924819540698, 4100.32827885320966743166, 4106.92542455509646970313, 4113.52393358371136855567, 4120.12380408292392530711, 4126.72503420165230636485, 4133.32762209384236484766, 4139.93156591844308422878,
    4146.53686383939020743128, 4153.14351402558804693399, 4159.75151465088492841460, 4166.36086389405227237148, 4172.97155993877004220849, 4179.58360097360309737269, 4186.19698519198209396563, 4192.81171079218711383874, 4199.42777597732037975220, 4206.04517895529352244921,
    4212.66391793881030025659, 4219.28399114534113323316, 4225.90539679710582277039, 4232.52813312105627119308, 4239.15219834885556338122, 4245.77759071686341485474, 4252.40430846611343440600, 4259.03234984229129622690, 4265.66171309572928294074, 4272.29239648137263429817,
    4278.92439825876772374613, 4285.55771669204841600731, 4292.19235004990969173377, 4298.82829660559582407586, 4305.46555463688036979875, 4312.10412242604706989368, 4318.74399825987347867340, 4325.38518042961368337274, 4332.02766723098102374934, 4338.67145696412990218960,
    4345.31654793363395583583, 4351.96293844848241860745, 4358.61062682204646989703, 4365.25961137207104911795, 4371.90989042065757530509, 4378.56146229424757621018, 4385.21432532360176992370, 4391.86847784378369397018, 4398.52391819415151985595, 4405.18064471832985873334,
    4411.83865576420157594839, 4418.49794968388505367329, 4425.15852483372418646468, 4431.82037957426928187488, 4438.48351227026068954729, 4445.14792129061061132234, 4451.81360500839309679577, 4458.48056180082221544581, 4465.14879004924023320200, 4471.81828813909760356182,
    4478.48905445994387264363, 4485.16108740540494181914, 4491.83438537317306327168, 4498.50894676498592161806, 4505.18476998662208643509, 4511.86185344786917994497, 4518.54019556252296752064, 4525.21979474836825829698, 4531.90064942715798679274, 4538.58275802460775594227,
    4545.26611897037309972802, 4551.95073069804129772820, 4558.63659164511045673862, 4565.32370025297677784692, 4572.01205496692364249611, 4578.70165423610251309583, 4585.39249651352020009654, 4592.08458025602794805309, 4598.77790392429778876249, 4605.47246598281799379038,
    4612.16826489987670356641, 4618.86529914754373749020, 4625.56356720165967999492, 4632.26306754182041913737, 4638.96379865136805165093, 4645.66575901737087406218, 4652.36894713061155925971, 4659.07336148557624255773, 4665.77900058043542230735, 4672.48586291703850292834,
    4679.19394700089105754159, 4685.90325134114937100094, 4692.61377445060224999906, 4699.32551484565829014173, 4706.03847104633587150602, 4712.75264157624496874632, 4719.46802496257987513673, 4726.18461973610101267695, 4732.90242443112401815597, 4739.62143758550973871024,
    4746.34165774064422294032, 4753.06308344143599242670, 4759.78571323629148537293, 4766.50954567711323761614, 4773.23457931927987374365, 4779.96081272163792164065, 4786.68824444648907956434, 4793.41687305957384523936, 4800.14669713006333040539, 4806.87771523054470890202,
    4813.60992593701212172164, 4820.34332782884939661017, 4827.07791948882186261471, 4833.81369950306543614715, 4840.55066646106752159540, 4847.28881895566246384988, 4854.02815558301972487243, 4860.76867494262660329696, 4867.51037563727822998771, 4874.25325627307029208168,
    4880.99731545938175258925, 4887.74255180886666494189, 4894.48896393743871158222, 4901.23655046426847547991, 4907.98531001176070276415, 4914.73524120554884575540, 4921.48634267448505852371, 4928.23861305062746396288, 4934.99205096922560187522, 4941.74665506871315301396,
    4948.50242399069793464150, 4955.25935637994462013012, 4962.01745088437291997252, 4968.77670615503575390903, 4975.53712084611925092759, 4982.29869361492364987498, 4989.06142312185602349928, 4995.82530803041754552396, 5002.59034700719894317444, 5009.35653872185957879992,
    5016.12388184712472138926, 5022.89237505877281364519, 5029.66201703562546754256, 5036.43280645953382190783, 5043.20474201537399494555, 5049.97782239102980383905, 5056.75204627738730778219, 5063.52741236832389404299, 5070.30391936069554503774, 5077.08156595433047186816,
    5083.86035085201638139552, 5090.64027275948865280952, 5097.42133038542488066014, 5104.20352244143123243703, 5110.98684764203517261194, 5117.77130470467272971291, 5124.55689234968031087192, 5131.34360930028560687788, 5138.13145428259576874552, 5144.92042602558740327368,
    5151.71052326110202557174, 5158.50174472382786916569, 5165.29408915129897650331, 5172.08755528387791855494, 5178.88214186475488531869, 5185.67784763992858643178, 5192.47467135820352268638, 5199.27261177117816259852, 5206.07166763323766645044, 5212.87183770153842488071,
    5219.67312073601078736829, 5226.47551549933541537030, 5233.27902075694419181673, 5240.08363527700657868991, 5246.88935783042234106688, 5253.69618719081427116180, 5260.50412213451545540011, 5267.31316144055836048210, 5274.12330389067392388824, 5280.93454826927518297452,
    5287.74689336345181800425, 5294.56033796296287619043, 5301.37488086022221978055, 5308.19052085029761656187, 5315.00725673089254996739, 5321.82508730234621907584, 5328.64401136762171518058, 5335.46402773229601734784, 5342.28513520455271645915, 5349.10733259517292026430,
    5355.93061871752979641315, 5362.75499238757129205624, 5369.58045242382740980247, 5376.40699764738383237273, 5383.23462688188647007337, 5390.06333895352872787043, 5396.89313269104150094790, 5403.72400692568680824479, 5410.55596049125324498164, 5417.38899222403870226117,
    5424.22310096285218605772, 5431.05828554900017479667, 5437.89454482627752440749, 5444.73187764096292085014, 5451.57028284180978516815, 5458.40975928003899753094, 5465.25030580932707380271, 5472.09192128580525604775, 5478.93460456804405112052, 5485.77835451704959268682,
    5492.62316999625818425557, 5499.46904987152174726361, 5506.31599301110782107571, 5513.16399828568410157459, 5520.01306456831662217155, 5526.86319073446338734357, 5533.71437566195618273923, 5540.56661823100785113638, 5547.41991732419410254806, 5554.27427182644987624371,
    5561.12968062506024580216, 5567.98614260965405264869, 5574.84365667219935858157, 5581.70222170699071284616, 5588.56183661064551415620, 5595.42250028209309675731, 5602.28421162257382093230, 5609.14696953562543058069, 5616.01077292707759625046, 5622.87562070504918665392,
    5629.74151177993280725786, 5636.60844506439480028348, 5643.47641947336524026468, 5650.34543392403065809049, 5657.21548733582858403679, 5664.08657863043936231406, 5670.95870673177796561504, 5677.83187056599035713589, 5684.70606906144348613452, 5691.58130114872074045707,
    5698.45756576061103260145, 5705.33486183210970921209, 5712.21318830040036118589, 5719.09254410486119013513, 5725.97292818704590899870, 5732.85433949068919901038, 5739.73677696168670081533, 5746.62023954809956194367, 5753.50472620014352287399, 5760.39023587017800309695,
    5767.27676751270792010473, 5774.16432008437368494924, 5781.05289254393755982164, 5787.94248385229275299935, 5794.83309297243977198377, 5801.72471886949188046856, 5808.61736051066418440314, 5815.51101686526726552984, 5822.40568690470081492094, 5829.30136960244817601051,
    5836.19806393407088762615, 5843.09576887720049853669, 5849.99448341152947250521, 5856.89420651881482626777, 5863.79493718285993963946, 5870.69667438951637450373, 5877.59941712667477986543, 5884.50316438425943488255, 5891.40791515422097290866, 5898.31366843053365300875,
    5905.22042320918080804404, 5912.12817848816303012427, 5919.03693326747907121899, 5925.94668654912311467342, 5932.85743733708477520850, 5939.76918463733636599500, 5946.68192745783017016947, 5953.59566480849025538191, 5960.51039570120883581694, 5967.42611914983990573091,
    5974.34283417019287298899, 5981.26053978002801159164, 5988.17923499904918571701, 5995.09891884889566426864, 6002.01959035314575885423, 6008.94124853729681490222, 6015.86389242877248761943, 6022.78752105691091855988, 6029.71213345295927865664, 6036.63772865007013024297,
    6043.56430568329142261064, 6050.49186358957103948342, 6057.42040140773497114424, 6064.34991817849822837161};
#pragma HLS RESOURCE variable=lgamma_table core=ROM_1P_BRAM
    return lgamma_table[k];
  }
  score_t calc_bdeu_local_score(int child, varset_t parents, data_t dataset[NUMOF_VARS][NUMOF_DATASETS], data_t nof_vars[NUMOF_VARS]){
    score_t local_score = 0;
    //const score_t ess = 10.0;
    int itr_num = 1;
    data_t refresh_timing[NUMOF_VARS];
    data_t counters[NUMOF_VARS];
    data_t now_comb[NUMOF_VARS];
  #pragma HLS ARRAY_PARTITION variable=refresh_timing complete dim = 1
  #pragma HLS ARRAY_PARTITION variable=counters complete dim = 1
  #pragma HLS ARRAY_PARTITION variable=now_comb complete dim = 1
  #pragma HLS RESOURCE variable=refresh_timing core=RAM_1P_BRAM
  #pragma HLS RESOURCE variable=counters core=RAM_1P_BRAM
  #pragma HLS RESOURCE variable=now_comb core=RAM_1P_BRAM
    int next_timing = 1;
    for(int i = 0; i < NUMOF_VARS; i++){
  #pragma HLS PIPELINE
      counters[i] = 0;
      now_comb[i] = 0;
      if(((parents >> i) & 1) || i == child){
        itr_num *= nof_vars[i];
        refresh_timing[i] = next_timing;
        next_timing *= nof_vars[i];
      }else{
        refresh_timing[i] = 0;//no need
      }
    }
    int status = 0;
    //score_t nijk_prime = (score_t)ess/(score_t)itr_num;
    //score_t nik_prime = nijk_prime * (score_t)nof_vars[child];

    combination_loop:for(int i = 0; i < itr_num; i++){
  #pragma HLS loop_tripcount min=1 max=256 avg=34
      //show combination
      //calc nik, nijk
      int nik = 0;
      int nijk = 0;
      for(int j = 0; j < NUMOF_DATASETS; j++){
        bool nik_match = true;
        bool nijk_match = true;
        for(int k = 0; k < NUMOF_VARS; k++){
  #pragma HLS UNROLL
          data_t d = dataset[k][j];
          if(((parents >> k) & 1) || k == child){
            if(d != now_comb[k]){
              nijk_match = false;
              if(k != child) nik_match = false;
            }
          }
        }
        if(nijk_match) nijk++;
        if(nik_match) nik++;
      }
      //calc score
  //#pragma HLS allocation instances = hls::my_lgamma limit=1 function
      //if(now_comb[child] == 0 && nik > 0) local_score += hls::my_lgamma((score_t)nik_prime/(score_t)((score_t)nik + nik_prime));
      //if(nijk > 0) local_score += hls::my_lgamma((score_t)((score_t)nijk + nijk_prime)/(score_t)(nijk_prime));

      //K2Score
      //The reason of the condition : now_comb[child] == 0 is, there is only one time when child value is 0 for each parents combination.
      int r = nof_vars[child];
#pragma HLS allocation instances=lgamma_int limit=1 function
      if(now_comb[child] == 0 && nik > 0) local_score += (lgamma_int(r) - lgamma_int(nik + r));
#pragma HLS allocation instances=lgamma_int limit=1 function
      if(nijk > 0) local_score += lgamma_int(nijk + 1);


      //next combination
      for(int k = 0; k < NUMOF_VARS; k++){
  #pragma HLS UNROLL
        if(((parents >> k) & 1) || k == child){
          counters[k]++;
          if(counters[k] == refresh_timing[k]){
            now_comb[k] = (now_comb[k] == (nof_vars[k] - (data_t)1)) ? (data_t)0 : (data_t)(now_comb[k]+(data_t)1);
            counters[k] = 0;
          }
        }
      }
    }
    return local_score;
  }
}
extern "C" {

typedef struct{
  score_t q;
  score_t f[NUMOF_VARS];
} pe_out;

void PE(int A, int stage,
  data_t dataset[NUMOF_VARS][NUMOF_DATASETS], data_t nof_vars[NUMOF_VARS],
  pe_out indata[NUMOF_VARS], pe_out& outdata){

  if(stage == 0 || A < 0) return;

  pe_out tmp_outdata;
  int cnt = 0;
  bool firstflag = true;
  int indexcnt[NUMOF_VARS];
#pragma HLS RESOURCE variable=indexcnt core=RAM_1P_LUTRAM
#pragma HLS ARRAY_PARTITION variable=indexcnt complete dim = 1
  unsigned int indexbit = (1U << (stage - 1)) - 1;
  for(int i = 0; i < NUMOF_VARS; i++){
#pragma HLS UNROLL
    indexcnt[i] = 0;
  }
  for(int i = 0; i < NUMOF_VARS; i++){
    if((A >> i) & 1U){
      varset_t parents = (A^(1U << i));
      score_t s = mylib::calc_bdeu_local_score(i, parents, dataset, nof_vars);
      score_t f = s;
      for(int k = 0; k < NUMOF_VARS; k++){
        if((indexbit >> k) & 1U){
          f = max(f, indata[k].f[indexcnt[k]]);
        }
      }
      //next status
      for(int k = 0; k < NUMOF_VARS; k++){
#pragma HLS UNROLL
        if((indexbit >> k) & 1U) indexcnt[k]++;
      }
      indexbit = (indexbit >> 1) | (1U << (stage - 1));

      score_t nowq = f + indata[stage-1-cnt].q;
      tmp_outdata.f[cnt] = f;
      tmp_outdata.q = firstflag ? nowq : max(tmp_outdata.q, nowq);
      firstflag = false;
      cnt++;
    }
  }
  outdata = tmp_outdata;
}

/*int nck(int n, int k){
  int ans = 1;
  for(int i = 0; i < k; i++){
    ans *= (n - i);
  }
  for(int i = 1; i <= k; i++){
    ans /= i;
  }
  return ans;
}*/

//K: popcount of val
int val2index(int val, int K){
  int res = 0;
  int onecnt = 0;
  int nck[NUMOF_VARS][NUMOF_VARS] = {
        {0, 0, 0, 0, 0, 0, 0, 0}, //dummy data
        {1, 1, 0, 0, 0, 0, 0, 0},
        {1, 2, 1, 0, 0, 0, 0, 0},
        {1, 3, 3, 1, 0, 0, 0, 0},
        {1, 4, 6, 4, 1, 0, 0, 0},
        {1, 5, 10, 10, 5, 1, 0, 0},
        {1, 6, 15, 20, 15, 6, 1, 0},
        {1, 7, 21, 35, 35, 21, 7, 1},
    };
  #pragma HLS RESOURCE variable=nck core=RAM_1P_LUTRAM
  #pragma HLS ARRAY_PARTITION variable=nck complete dim = 0
  for(int i = 0; i < NUMOF_VARS; i++){
#pragma HLS PIPELINE
    if((val >> i) & 1U){
      onecnt++;
    }else{
      int n = NUMOF_VARS - 1 - i;
      int k = K - 1 - onecnt;
      if(n > 0 && k >= 0) res += nck[n][k];
    }
  }
  return res;
}

//top function
void hypercube_kernel(
    data_t *p_dataset,
    data_t *p_nof_vars, float* p_best_score){

#pragma HLS INTERFACE m_axi port=p_dataset offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=p_nof_vars offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=p_best_score offset=slave bundle=gmem2
#pragma HLS INTERFACE s_axilite port=p_dataset bundle=control
#pragma HLS INTERFACE s_axilite port=p_nof_vars bundle=control
#pragma HLS INTERFACE s_axilite port=p_best_score bundle=control
#pragma HLS INTERFACE s_axilite port=return bundle=control

  data_t dataset[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset2[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset3[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset4[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset5[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset6[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset7[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset8[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset9[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset10[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset11[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset12[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset13[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset14[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset15[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset16[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset17[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset18[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset19[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset20[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset21[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset22[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset23[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset24[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset25[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset26[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset27[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset28[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset29[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset30[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset31[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset32[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset33[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset34[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset35[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset36[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset37[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset38[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset39[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset40[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset41[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset42[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset43[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset44[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset45[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset46[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset47[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset48[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset49[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset50[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset51[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset52[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset53[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset54[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset55[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset56[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset57[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset58[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset59[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset60[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset61[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset62[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset63[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset64[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset65[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset66[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset67[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset68[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset69[NUMOF_VARS][NUMOF_DATASETS];
  data_t dataset70[NUMOF_VARS][NUMOF_DATASETS];
	#pragma HLS ARRAY_PARTITION variable=dataset complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset2 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset3 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset4 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset5 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset6 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset7 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset8 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset9 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset10 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset11 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset12 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset13 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset14 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset15 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset16 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset17 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset18 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset19 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset20 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset21 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset22 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset23 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset24 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset25 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset26 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset27 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset28 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset29 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset30 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset31 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset32 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset33 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset34 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset35 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset36 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset37 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset38 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset39 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset40 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset41 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset42 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset43 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset44 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset45 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset46 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset47 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset48 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset49 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset50 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset51 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset52 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset53 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset54 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset55 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset56 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset57 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset58 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset59 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset60 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset61 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset62 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset63 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset64 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset65 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset66 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset67 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset68 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset69 complete dim = 1
	#pragma HLS ARRAY_PARTITION variable=dataset70 complete dim = 1

  data_t nof_vars[PE_NUM][NUMOF_VARS];
#pragma HLS ARRAY_PARTITION variable=nof_vars complete dim = 1
#pragma HLS RESOURCE variable=nof_vars core=RAM_1P_LUTRAM

/*#pragma HLS stable variable=dataset
#pragma HLS stable variable=dataset2
#pragma HLS stable variable=dataset3
#pragma HLS stable variable=dataset4
#pragma HLS stable variable=dataset5
#pragma HLS stable variable=dataset6*/

  for(int i = 0; i < NUMOF_VARS; i++){
    int offset = i * NUMOF_DATASETS;
    memcpy(dataset[i], p_dataset + offset, (NUMOF_DATASETS / 4)* sizeof(int));
  }
  for(int i = 0; i < NUMOF_VARS; i++){
    for(int j = 0; j < NUMOF_DATASETS; j++){
      data_t d = dataset[i][j];
      dataset2[i][j] = d; dataset3[i][j] = d; dataset4[i][j] = d;
      dataset5[i][j] = d; dataset6[i][j] = d; dataset7[i][j] = d;
      dataset8[i][j] = d; dataset9[i][j] = d; dataset10[i][j] = d;
      dataset11[i][j] = d; dataset12[i][j] = d; dataset13[i][j] = d;
      dataset14[i][j] = d; dataset15[i][j] = d; dataset16[i][j] = d;
      dataset17[i][j] = d; dataset18[i][j] = d; dataset19[i][j] = d;
      dataset20[i][j] = d; dataset21[i][j] = d; dataset22[i][j] = d;
      dataset23[i][j] = d; dataset24[i][j] = d; dataset25[i][j] = d;
      dataset26[i][j] = d; dataset27[i][j] = d; dataset28[i][j] = d;
      dataset29[i][j] = d; dataset30[i][j] = d; dataset31[i][j] = d;
      dataset32[i][j] = d; dataset33[i][j] = d; dataset34[i][j] = d;
      dataset35[i][j] = d; dataset36[i][j] = d; dataset37[i][j] = d;
      dataset38[i][j] = d; dataset39[i][j] = d; dataset40[i][j] = d;
      dataset41[i][j] = d; dataset42[i][j] = d; dataset43[i][j] = d;
      dataset44[i][j] = d; dataset45[i][j] = d; dataset46[i][j] = d;
      dataset47[i][j] = d; dataset48[i][j] = d; dataset49[i][j] = d;
      dataset50[i][j] = d; dataset51[i][j] = d; dataset52[i][j] = d;
      dataset53[i][j] = d; dataset54[i][j] = d; dataset55[i][j] = d;
      dataset56[i][j] = d; dataset57[i][j] = d; dataset58[i][j] = d;
      dataset59[i][j] = d; dataset60[i][j] = d; dataset61[i][j] = d;
      dataset62[i][j] = d; dataset63[i][j] = d; dataset64[i][j] = d;
      dataset65[i][j] = d; dataset66[i][j] = d; dataset67[i][j] = d;
      dataset68[i][j] = d; dataset69[i][j] = d; dataset70[i][j] = d;
    }
  }

  for(int i = 0; i < PE_NUM; i++){
    int offset = i * NUMOF_VARS;
    memcpy(nof_vars[i], p_nof_vars, (NUMOF_VARS / 4)* sizeof(int));
  }
  const int A[NUMOF_VARS + 1][PE_NUM] = {
  {0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  {1, 2, 4, 8, 16, 32, 64, 128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  {3, 5, 9, 17, 33, 65, 129, 6, 10, 18, 34, 66, 130, 12, 20, 36, 68, 132, 24, 40, 72, 136, 48, 80, 144, 96, 160, 192, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  {7, 11, 19, 35, 67, 131, 13, 21, 37, 69, 133, 25, 41, 73, 137, 49, 81, 145, 97, 161, 193, 14, 22, 38, 70, 134, 26, 42, 74, 138, 50, 82, 146, 98, 162, 194, 28, 44, 76, 140, 52, 84, 148, 100, 164, 196, 56, 88, 152, 104, 168, 200, 112, 176, 208, 224, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  {15, 23, 39, 71, 135, 27, 43, 75, 139, 51, 83, 147, 99, 163, 195, 29, 45, 77, 141, 53, 85, 149, 101, 165, 197, 57, 89, 153, 105, 169, 201, 113, 177, 209, 225, 30, 46, 78, 142, 54, 86, 150, 102, 166, 198, 58, 90, 154, 106, 170, 202, 114, 178, 210, 226, 60, 92, 156, 108, 172, 204, 116, 180, 212, 228, 120, 184, 216, 232, 240},
  {31, 47, 79, 143, 55, 87, 151, 103, 167, 199, 59, 91, 155, 107, 171, 203, 115, 179, 211, 227, 61, 93, 157, 109, 173, 205, 117, 181, 213, 229, 121, 185, 217, 233, 241, 62, 94, 158, 110, 174, 206, 118, 182, 214, 230, 122, 186, 218, 234, 242, 124, 188, 220, 236, 244, 248, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  {63, 95, 159, 111, 175, 207, 119, 183, 215, 231, 123, 187, 219, 235, 243, 125, 189, 221, 237, 245, 249, 126, 190, 222, 238, 246, 250, 252, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  {127, 191, 223, 239, 247, 251, 253, 254, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  {255, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
  };

#pragma HLS ARRAY_PARTITION variable=A complete dim=2
#pragma HLS RESOURCE variable=A core=ROM_1P_BRAM

  int a[PE_NUM] = {0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#pragma HLS ARRAY_PARTITION variable=a complete dim=1
//#pragma HLS RESOURCE variable=a core=RAM_1P_LUTRAM

  pe_out indata[PE_NUM][NUMOF_VARS];
  pe_out outdata[PE_NUM];
  //initialize (output of stage 0)
  for(int i = 0; i < PE_NUM; i++){
	outdata[i].q = 0;
    for(int j = 0; j < NUMOF_VARS; j++){
      outdata[i].f[j] = 0;
    }
  }
#pragma HLS ARRAY_PARTITION variable=indata complete dim=1
//#pragma HLS ARRAY_PARTITION variable=indata->f complete dim=1

#pragma HLS ARRAY_PARTITION variable=outdata complete dim=1
//#pragma HLS ARRAY_PARTITION variable=outdata->f complete dim=1
  score_t res = 0;
  //main function
  for(int stage = 0; stage <= NUMOF_VARS; stage++){
    PE(a[0], stage, dataset, nof_vars[0], indata[0], outdata[0]);
    PE(a[1], stage, dataset2, nof_vars[1], indata[1], outdata[1]);
    PE(a[2], stage, dataset3, nof_vars[2], indata[2], outdata[2]);
    PE(a[3], stage, dataset4, nof_vars[3], indata[3], outdata[3]);
    PE(a[4], stage, dataset5, nof_vars[4], indata[4], outdata[4]);
    PE(a[5], stage, dataset6, nof_vars[5], indata[5], outdata[5]);
    PE(a[6], stage, dataset7, nof_vars[6], indata[6], outdata[6]);
    PE(a[7], stage, dataset8, nof_vars[7], indata[7], outdata[7]);
    PE(a[8], stage, dataset9, nof_vars[8], indata[8], outdata[8]);
    PE(a[9], stage, dataset10, nof_vars[9], indata[9], outdata[9]);
    PE(a[10], stage, dataset11, nof_vars[10], indata[10], outdata[10]);
    PE(a[11], stage, dataset12, nof_vars[11], indata[11], outdata[11]);
    PE(a[12], stage, dataset13, nof_vars[12], indata[12], outdata[12]);
    PE(a[13], stage, dataset14, nof_vars[13], indata[13], outdata[13]);
    PE(a[14], stage, dataset15, nof_vars[14], indata[14], outdata[14]);
    PE(a[15], stage, dataset16, nof_vars[15], indata[15], outdata[15]);
    PE(a[16], stage, dataset17, nof_vars[16], indata[16], outdata[16]);
    PE(a[17], stage, dataset18, nof_vars[17], indata[17], outdata[17]);
    PE(a[18], stage, dataset19, nof_vars[18], indata[18], outdata[18]);
    PE(a[19], stage, dataset20, nof_vars[19], indata[19], outdata[19]);
    PE(a[20], stage, dataset21, nof_vars[20], indata[20], outdata[20]);
    PE(a[21], stage, dataset22, nof_vars[21], indata[21], outdata[21]);
    PE(a[22], stage, dataset23, nof_vars[22], indata[22], outdata[22]);
    PE(a[23], stage, dataset24, nof_vars[23], indata[23], outdata[23]);
    PE(a[24], stage, dataset25, nof_vars[24], indata[24], outdata[24]);
    PE(a[25], stage, dataset26, nof_vars[25], indata[25], outdata[25]);
    PE(a[26], stage, dataset27, nof_vars[26], indata[26], outdata[26]);
    PE(a[27], stage, dataset28, nof_vars[27], indata[27], outdata[27]);
    PE(a[28], stage, dataset29, nof_vars[28], indata[28], outdata[28]);
    PE(a[29], stage, dataset30, nof_vars[29], indata[29], outdata[29]);
    PE(a[30], stage, dataset31, nof_vars[30], indata[30], outdata[30]);
    PE(a[31], stage, dataset32, nof_vars[31], indata[31], outdata[31]);
    PE(a[32], stage, dataset33, nof_vars[32], indata[32], outdata[32]);
    PE(a[33], stage, dataset34, nof_vars[33], indata[33], outdata[33]);
    PE(a[34], stage, dataset35, nof_vars[34], indata[34], outdata[34]);
    PE(a[35], stage, dataset36, nof_vars[35], indata[35], outdata[35]);
    PE(a[36], stage, dataset37, nof_vars[36], indata[36], outdata[36]);
    PE(a[37], stage, dataset38, nof_vars[37], indata[37], outdata[37]);
    PE(a[38], stage, dataset39, nof_vars[38], indata[38], outdata[38]);
    PE(a[39], stage, dataset40, nof_vars[39], indata[39], outdata[39]);
    PE(a[40], stage, dataset41, nof_vars[40], indata[40], outdata[40]);
    PE(a[41], stage, dataset42, nof_vars[41], indata[41], outdata[41]);
    PE(a[42], stage, dataset43, nof_vars[42], indata[42], outdata[42]);
    PE(a[43], stage, dataset44, nof_vars[43], indata[43], outdata[43]);
    PE(a[44], stage, dataset45, nof_vars[44], indata[44], outdata[44]);
    PE(a[45], stage, dataset46, nof_vars[45], indata[45], outdata[45]);
    PE(a[46], stage, dataset47, nof_vars[46], indata[46], outdata[46]);
    PE(a[47], stage, dataset48, nof_vars[47], indata[47], outdata[47]);
    PE(a[48], stage, dataset49, nof_vars[48], indata[48], outdata[48]);
    PE(a[49], stage, dataset50, nof_vars[49], indata[49], outdata[49]);
    PE(a[50], stage, dataset51, nof_vars[50], indata[50], outdata[50]);
    PE(a[51], stage, dataset52, nof_vars[51], indata[51], outdata[51]);
    PE(a[52], stage, dataset53, nof_vars[52], indata[52], outdata[52]);
    PE(a[53], stage, dataset54, nof_vars[53], indata[53], outdata[53]);
    PE(a[54], stage, dataset55, nof_vars[54], indata[54], outdata[54]);
    PE(a[55], stage, dataset56, nof_vars[55], indata[55], outdata[55]);
    PE(a[56], stage, dataset57, nof_vars[56], indata[56], outdata[56]);
    PE(a[57], stage, dataset58, nof_vars[57], indata[57], outdata[57]);
    PE(a[58], stage, dataset59, nof_vars[58], indata[58], outdata[58]);
    PE(a[59], stage, dataset60, nof_vars[59], indata[59], outdata[59]);
    PE(a[60], stage, dataset61, nof_vars[60], indata[60], outdata[60]);
    PE(a[61], stage, dataset62, nof_vars[61], indata[61], outdata[61]);
    PE(a[62], stage, dataset63, nof_vars[62], indata[62], outdata[62]);
    PE(a[63], stage, dataset64, nof_vars[63], indata[63], outdata[63]);
    PE(a[64], stage, dataset65, nof_vars[64], indata[64], outdata[64]);
    PE(a[65], stage, dataset66, nof_vars[65], indata[65], outdata[65]);
    PE(a[66], stage, dataset67, nof_vars[66], indata[66], outdata[66]);
    PE(a[67], stage, dataset68, nof_vars[67], indata[67], outdata[67]);
    PE(a[68], stage, dataset69, nof_vars[68], indata[68], outdata[68]);
    PE(a[69], stage, dataset70, nof_vars[69], indata[69], outdata[69]);

    if(stage < NUMOF_VARS){
      //read Next A
      loop_read_nextA:for(int i = 0; i < PE_NUM; i++){
#pragma HLS UNROLL
        a[i] = A[stage+1][i];
      }
      //prepare next input
      int indexcnt[PE_NUM];
#pragma HLS ARRAY_PARTITION variable=indexcnt complete dim=1
//#pragma HLS RESOURCE variable=A core=ROM_1P_BRAM
      loop_initialize_indexcnt:for(int i = 0; i < PE_NUM; i++){
#pragma HLS UNROLL
        indexcnt[i] = 0;
      }
        //for each j, all "index" values calculated by k are different
      for(int k = NUMOF_VARS - 1; k >= 0; k--){
        for(int j = 0; j < PE_NUM; j++){//nC(stage+1)
#pragma HLS PIPELINE
//#pragma HLS dependence variable=outdata inter false
          if(a[j] < 0) continue;
          if((a[j] >> k) & 1U){
            int tmp = a[j]^(1U << k);
            //cout << j << " " << a[j] << " " << tmp << endl;
            int index = val2index(a[j]^(1U << k), stage);
            pe_out data = outdata[index];
            //cout << "indata[" << j << "][" << indexcnt[j] << "] = " << "outdata[" << index << "]" << " " << data.q.to_string(10) << endl;
            indata[j][indexcnt[j]] = data;
            indexcnt[j]++;
          }
        }
      }
    }else{
      //final output
      res = outdata[0].q;
    }
  }

  *p_best_score = (float)res;
}

}
